// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/aywan/balun_miserv_s2/chat-server/internal/repository/chat/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/aywan/balun_miserv_s2/chat-server/internal/model"
)

// MockChat is an autogenerated mock type for the Chat type
type MockChat struct {
	mock.Mock
}

type MockChat_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChat) EXPECT() *MockChat_Expecter {
	return &MockChat_Expecter{mock: &_m.Mock}
}

// AddUsersToChat provides a mock function with given fields: ctx, chatID, users, lastMessageID
func (_m *MockChat) AddUsersToChat(ctx context.Context, chatID int64, users []int64, lastMessageID int64) error {
	ret := _m.Called(ctx, chatID, users, lastMessageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64, int64) error); ok {
		r0 = rf(ctx, chatID, users, lastMessageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChat_AddUsersToChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUsersToChat'
type MockChat_AddUsersToChat_Call struct {
	*mock.Call
}

// AddUsersToChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - users []int64
//   - lastMessageID int64
func (_e *MockChat_Expecter) AddUsersToChat(ctx interface{}, chatID interface{}, users interface{}, lastMessageID interface{}) *MockChat_AddUsersToChat_Call {
	return &MockChat_AddUsersToChat_Call{Call: _e.mock.On("AddUsersToChat", ctx, chatID, users, lastMessageID)}
}

func (_c *MockChat_AddUsersToChat_Call) Run(run func(ctx context.Context, chatID int64, users []int64, lastMessageID int64)) *MockChat_AddUsersToChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]int64), args[3].(int64))
	})
	return _c
}

func (_c *MockChat_AddUsersToChat_Call) Return(_a0 error) *MockChat_AddUsersToChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChat_AddUsersToChat_Call) RunAndReturn(run func(context.Context, int64, []int64, int64) error) *MockChat_AddUsersToChat_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChat provides a mock function with given fields: ctx, data
func (_m *MockChat) CreateChat(ctx context.Context, data dto.CreateChatDTO) (int64, error) {
	ret := _m.Called(ctx, data)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateChatDTO) (int64, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateChatDTO) int64); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateChatDTO) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChat_CreateChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChat'
type MockChat_CreateChat_Call struct {
	*mock.Call
}

// CreateChat is a helper method to define mock.On call
//   - ctx context.Context
//   - data dto.CreateChatDTO
func (_e *MockChat_Expecter) CreateChat(ctx interface{}, data interface{}) *MockChat_CreateChat_Call {
	return &MockChat_CreateChat_Call{Call: _e.mock.On("CreateChat", ctx, data)}
}

func (_c *MockChat_CreateChat_Call) Run(run func(ctx context.Context, data dto.CreateChatDTO)) *MockChat_CreateChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateChatDTO))
	})
	return _c
}

func (_c *MockChat_CreateChat_Call) Return(_a0 int64, _a1 error) *MockChat_CreateChat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChat_CreateChat_Call) RunAndReturn(run func(context.Context, dto.CreateChatDTO) (int64, error)) *MockChat_CreateChat_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMessage provides a mock function with given fields: ctx, data
func (_m *MockChat) CreateMessage(ctx context.Context, data dto.CreateMessageDTO) (int64, error) {
	ret := _m.Called(ctx, data)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateMessageDTO) (int64, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateMessageDTO) int64); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateMessageDTO) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChat_CreateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMessage'
type MockChat_CreateMessage_Call struct {
	*mock.Call
}

// CreateMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - data dto.CreateMessageDTO
func (_e *MockChat_Expecter) CreateMessage(ctx interface{}, data interface{}) *MockChat_CreateMessage_Call {
	return &MockChat_CreateMessage_Call{Call: _e.mock.On("CreateMessage", ctx, data)}
}

func (_c *MockChat_CreateMessage_Call) Run(run func(ctx context.Context, data dto.CreateMessageDTO)) *MockChat_CreateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateMessageDTO))
	})
	return _c
}

func (_c *MockChat_CreateMessage_Call) Return(_a0 int64, _a1 error) *MockChat_CreateMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChat_CreateMessage_Call) RunAndReturn(run func(context.Context, dto.CreateMessageDTO) (int64, error)) *MockChat_CreateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChat provides a mock function with given fields: ctx, chatID
func (_m *MockChat) DeleteChat(ctx context.Context, chatID int64) error {
	ret := _m.Called(ctx, chatID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChat_DeleteChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChat'
type MockChat_DeleteChat_Call struct {
	*mock.Call
}

// DeleteChat is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
func (_e *MockChat_Expecter) DeleteChat(ctx interface{}, chatID interface{}) *MockChat_DeleteChat_Call {
	return &MockChat_DeleteChat_Call{Call: _e.mock.On("DeleteChat", ctx, chatID)}
}

func (_c *MockChat_DeleteChat_Call) Run(run func(ctx context.Context, chatID int64)) *MockChat_DeleteChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockChat_DeleteChat_Call) Return(_a0 error) *MockChat_DeleteChat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChat_DeleteChat_Call) RunAndReturn(run func(context.Context, int64) error) *MockChat_DeleteChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageAfter provides a mock function with given fields: ctx, chatId, messageId, limit
func (_m *MockChat) GetMessageAfter(ctx context.Context, chatId int64, messageId int64, limit uint64) (model.MessageList, error) {
	ret := _m.Called(ctx, chatId, messageId, limit)

	var r0 model.MessageList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, uint64) (model.MessageList, error)); ok {
		return rf(ctx, chatId, messageId, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, uint64) model.MessageList); ok {
		r0 = rf(ctx, chatId, messageId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.MessageList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, uint64) error); ok {
		r1 = rf(ctx, chatId, messageId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChat_GetMessageAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageAfter'
type MockChat_GetMessageAfter_Call struct {
	*mock.Call
}

// GetMessageAfter is a helper method to define mock.On call
//   - ctx context.Context
//   - chatId int64
//   - messageId int64
//   - limit uint64
func (_e *MockChat_Expecter) GetMessageAfter(ctx interface{}, chatId interface{}, messageId interface{}, limit interface{}) *MockChat_GetMessageAfter_Call {
	return &MockChat_GetMessageAfter_Call{Call: _e.mock.On("GetMessageAfter", ctx, chatId, messageId, limit)}
}

func (_c *MockChat_GetMessageAfter_Call) Run(run func(ctx context.Context, chatId int64, messageId int64, limit uint64)) *MockChat_GetMessageAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(uint64))
	})
	return _c
}

func (_c *MockChat_GetMessageAfter_Call) Return(_a0 model.MessageList, _a1 error) *MockChat_GetMessageAfter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChat_GetMessageAfter_Call) RunAndReturn(run func(context.Context, int64, int64, uint64) (model.MessageList, error)) *MockChat_GetMessageAfter_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageBefore provides a mock function with given fields: ctx, chatId, messageId, limit
func (_m *MockChat) GetMessageBefore(ctx context.Context, chatId int64, messageId int64, limit uint64) (model.MessageList, error) {
	ret := _m.Called(ctx, chatId, messageId, limit)

	var r0 model.MessageList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, uint64) (model.MessageList, error)); ok {
		return rf(ctx, chatId, messageId, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, uint64) model.MessageList); ok {
		r0 = rf(ctx, chatId, messageId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.MessageList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, uint64) error); ok {
		r1 = rf(ctx, chatId, messageId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChat_GetMessageBefore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageBefore'
type MockChat_GetMessageBefore_Call struct {
	*mock.Call
}

// GetMessageBefore is a helper method to define mock.On call
//   - ctx context.Context
//   - chatId int64
//   - messageId int64
//   - limit uint64
func (_e *MockChat_Expecter) GetMessageBefore(ctx interface{}, chatId interface{}, messageId interface{}, limit interface{}) *MockChat_GetMessageBefore_Call {
	return &MockChat_GetMessageBefore_Call{Call: _e.mock.On("GetMessageBefore", ctx, chatId, messageId, limit)}
}

func (_c *MockChat_GetMessageBefore_Call) Run(run func(ctx context.Context, chatId int64, messageId int64, limit uint64)) *MockChat_GetMessageBefore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(uint64))
	})
	return _c
}

func (_c *MockChat_GetMessageBefore_Call) Return(_a0 model.MessageList, _a1 error) *MockChat_GetMessageBefore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChat_GetMessageBefore_Call) RunAndReturn(run func(context.Context, int64, int64, uint64) (model.MessageList, error)) *MockChat_GetMessageBefore_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChatLastMessage provides a mock function with given fields: ctx, chatID, lastMessageID
func (_m *MockChat) UpdateChatLastMessage(ctx context.Context, chatID int64, lastMessageID int64) error {
	ret := _m.Called(ctx, chatID, lastMessageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, chatID, lastMessageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChat_UpdateChatLastMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChatLastMessage'
type MockChat_UpdateChatLastMessage_Call struct {
	*mock.Call
}

// UpdateChatLastMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - chatID int64
//   - lastMessageID int64
func (_e *MockChat_Expecter) UpdateChatLastMessage(ctx interface{}, chatID interface{}, lastMessageID interface{}) *MockChat_UpdateChatLastMessage_Call {
	return &MockChat_UpdateChatLastMessage_Call{Call: _e.mock.On("UpdateChatLastMessage", ctx, chatID, lastMessageID)}
}

func (_c *MockChat_UpdateChatLastMessage_Call) Run(run func(ctx context.Context, chatID int64, lastMessageID int64)) *MockChat_UpdateChatLastMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockChat_UpdateChatLastMessage_Call) Return(_a0 error) *MockChat_UpdateChatLastMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChat_UpdateChatLastMessage_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockChat_UpdateChatLastMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChat creates a new instance of MockChat. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChat(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChat {
	mock := &MockChat{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
