// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/aywan/balun_miserv_s2/chat-server/internal/service/chat/dto"
	mock "github.com/stretchr/testify/mock"
)

// MockChat is an autogenerated mock type for the Chat type
type MockChat struct {
	mock.Mock
}

type MockChat_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChat) EXPECT() *MockChat_Expecter {
	return &MockChat_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *MockChat) Create(ctx context.Context, _a1 dto.NewChatDTO) (int64, error) {
	ret := _m.Called(ctx, _a1)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewChatDTO) (int64, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewChatDTO) int64); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.NewChatDTO) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChat_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockChat_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 dto.NewChatDTO
func (_e *MockChat_Expecter) Create(ctx interface{}, _a1 interface{}) *MockChat_Create_Call {
	return &MockChat_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *MockChat_Create_Call) Run(run func(ctx context.Context, _a1 dto.NewChatDTO)) *MockChat_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.NewChatDTO))
	})
	return _c
}

func (_c *MockChat_Create_Call) Return(_a0 int64, _a1 error) *MockChat_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChat_Create_Call) RunAndReturn(run func(context.Context, dto.NewChatDTO) (int64, error)) *MockChat_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockChat) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChat_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockChat_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockChat_Expecter) Delete(ctx interface{}, id interface{}) *MockChat_Delete_Call {
	return &MockChat_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockChat_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockChat_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockChat_Delete_Call) Return(_a0 error) *MockChat_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChat_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockChat_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessages provides a mock function with given fields: ctx, req
func (_m *MockChat) GetMessages(ctx context.Context, req dto.GetMessagesDTO) (dto.MessagesResultDTO, error) {
	ret := _m.Called(ctx, req)

	var r0 dto.MessagesResultDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetMessagesDTO) (dto.MessagesResultDTO, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetMessagesDTO) dto.MessagesResultDTO); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.MessagesResultDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetMessagesDTO) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChat_GetMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessages'
type MockChat_GetMessages_Call struct {
	*mock.Call
}

// GetMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.GetMessagesDTO
func (_e *MockChat_Expecter) GetMessages(ctx interface{}, req interface{}) *MockChat_GetMessages_Call {
	return &MockChat_GetMessages_Call{Call: _e.mock.On("GetMessages", ctx, req)}
}

func (_c *MockChat_GetMessages_Call) Run(run func(ctx context.Context, req dto.GetMessagesDTO)) *MockChat_GetMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.GetMessagesDTO))
	})
	return _c
}

func (_c *MockChat_GetMessages_Call) Return(_a0 dto.MessagesResultDTO, _a1 error) *MockChat_GetMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChat_GetMessages_Call) RunAndReturn(run func(context.Context, dto.GetMessagesDTO) (dto.MessagesResultDTO, error)) *MockChat_GetMessages_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: ctx, data
func (_m *MockChat) SendMessage(ctx context.Context, data dto.SendMessageDTO) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.SendMessageDTO) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockChat_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockChat_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - data dto.SendMessageDTO
func (_e *MockChat_Expecter) SendMessage(ctx interface{}, data interface{}) *MockChat_SendMessage_Call {
	return &MockChat_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, data)}
}

func (_c *MockChat_SendMessage_Call) Run(run func(ctx context.Context, data dto.SendMessageDTO)) *MockChat_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.SendMessageDTO))
	})
	return _c
}

func (_c *MockChat_SendMessage_Call) Return(_a0 error) *MockChat_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockChat_SendMessage_Call) RunAndReturn(run func(context.Context, dto.SendMessageDTO) error) *MockChat_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChat creates a new instance of MockChat. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChat(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChat {
	mock := &MockChat{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
