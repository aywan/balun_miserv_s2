// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/aywan/balun_miserv_s2/auth-server/internal/repository/user/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/aywan/balun_miserv_s2/auth-server/internal/model"
)

// MockUser is an autogenerated mock type for the User type
type MockUser struct {
	mock.Mock
}

type MockUser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUser) EXPECT() *MockUser_Expecter {
	return &MockUser_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, data
func (_m *MockUser) Create(ctx context.Context, data model.UserData) (int64, error) {
	ret := _m.Called(ctx, data)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserData) (int64, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserData) int64); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserData) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUser_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - data model.UserData
func (_e *MockUser_Expecter) Create(ctx interface{}, data interface{}) *MockUser_Create_Call {
	return &MockUser_Create_Call{Call: _e.mock.On("Create", ctx, data)}
}

func (_c *MockUser_Create_Call) Run(run func(ctx context.Context, data model.UserData)) *MockUser_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserData))
	})
	return _c
}

func (_c *MockUser_Create_Call) Return(_a0 int64, _a1 error) *MockUser_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_Create_Call) RunAndReturn(run func(context.Context, model.UserData) (int64, error)) *MockUser_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, userId
func (_m *MockUser) Delete(ctx context.Context, userId int64) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUser_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
func (_e *MockUser_Expecter) Delete(ctx interface{}, userId interface{}) *MockUser_Delete_Call {
	return &MockUser_Delete_Call{Call: _e.mock.On("Delete", ctx, userId)}
}

func (_c *MockUser_Delete_Call) Run(run func(ctx context.Context, userId int64)) *MockUser_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUser_Delete_Call) Return(_a0 error) *MockUser_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockUser_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsByEmail provides a mock function with given fields: ctx, email
func (_m *MockUser) ExistsByEmail(ctx context.Context, email string) (bool, error) {
	ret := _m.Called(ctx, email)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_ExistsByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsByEmail'
type MockUser_ExistsByEmail_Call struct {
	*mock.Call
}

// ExistsByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUser_Expecter) ExistsByEmail(ctx interface{}, email interface{}) *MockUser_ExistsByEmail_Call {
	return &MockUser_ExistsByEmail_Call{Call: _e.mock.On("ExistsByEmail", ctx, email)}
}

func (_c *MockUser_ExistsByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUser_ExistsByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUser_ExistsByEmail_Call) Return(_a0 bool, _a1 error) *MockUser_ExistsByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_ExistsByEmail_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockUser_ExistsByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsById provides a mock function with given fields: ctx, userId
func (_m *MockUser) ExistsById(ctx context.Context, userId int64) (bool, error) {
	ret := _m.Called(ctx, userId)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_ExistsById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsById'
type MockUser_ExistsById_Call struct {
	*mock.Call
}

// ExistsById is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
func (_e *MockUser_Expecter) ExistsById(ctx interface{}, userId interface{}) *MockUser_ExistsById_Call {
	return &MockUser_ExistsById_Call{Call: _e.mock.On("ExistsById", ctx, userId)}
}

func (_c *MockUser_ExistsById_Call) Run(run func(ctx context.Context, userId int64)) *MockUser_ExistsById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUser_ExistsById_Call) Return(_a0 bool, _a1 error) *MockUser_ExistsById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_ExistsById_Call) RunAndReturn(run func(context.Context, int64) (bool, error)) *MockUser_ExistsById_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotDeleted provides a mock function with given fields: ctx, userId
func (_m *MockUser) GetNotDeleted(ctx context.Context, userId int64) (model.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.User); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUser_GetNotDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotDeleted'
type MockUser_GetNotDeleted_Call struct {
	*mock.Call
}

// GetNotDeleted is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
func (_e *MockUser_Expecter) GetNotDeleted(ctx interface{}, userId interface{}) *MockUser_GetNotDeleted_Call {
	return &MockUser_GetNotDeleted_Call{Call: _e.mock.On("GetNotDeleted", ctx, userId)}
}

func (_c *MockUser_GetNotDeleted_Call) Run(run func(ctx context.Context, userId int64)) *MockUser_GetNotDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUser_GetNotDeleted_Call) Return(_a0 model.User, _a1 error) *MockUser_GetNotDeleted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUser_GetNotDeleted_Call) RunAndReturn(run func(context.Context, int64) (model.User, error)) *MockUser_GetNotDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, userId, data
func (_m *MockUser) Update(ctx context.Context, userId int64, data dto.UpdateDTO) error {
	ret := _m.Called(ctx, userId, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, dto.UpdateDTO) error); ok {
		r0 = rf(ctx, userId, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUser_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUser_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - data dto.UpdateDTO
func (_e *MockUser_Expecter) Update(ctx interface{}, userId interface{}, data interface{}) *MockUser_Update_Call {
	return &MockUser_Update_Call{Call: _e.mock.On("Update", ctx, userId, data)}
}

func (_c *MockUser_Update_Call) Run(run func(ctx context.Context, userId int64, data dto.UpdateDTO)) *MockUser_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(dto.UpdateDTO))
	})
	return _c
}

func (_c *MockUser_Update_Call) Return(_a0 error) *MockUser_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUser_Update_Call) RunAndReturn(run func(context.Context, int64, dto.UpdateDTO) error) *MockUser_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUser creates a new instance of MockUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUser {
	mock := &MockUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
