// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/aywan/balun_miserv_s2/auth-server/internal/repository/audit/dto"
	mock "github.com/stretchr/testify/mock"
)

// MockAudit is an autogenerated mock type for the Audit type
type MockAudit struct {
	mock.Mock
}

type MockAudit_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAudit) EXPECT() *MockAudit_Expecter {
	return &MockAudit_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: ctx, data
func (_m *MockAudit) Insert(ctx context.Context, data dto.InsertDTO) (int64, error) {
	ret := _m.Called(ctx, data)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.InsertDTO) (int64, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.InsertDTO) int64); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.InsertDTO) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAudit_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockAudit_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - data dto.InsertDTO
func (_e *MockAudit_Expecter) Insert(ctx interface{}, data interface{}) *MockAudit_Insert_Call {
	return &MockAudit_Insert_Call{Call: _e.mock.On("Insert", ctx, data)}
}

func (_c *MockAudit_Insert_Call) Run(run func(ctx context.Context, data dto.InsertDTO)) *MockAudit_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.InsertDTO))
	})
	return _c
}

func (_c *MockAudit_Insert_Call) Return(_a0 int64, _a1 error) *MockAudit_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAudit_Insert_Call) RunAndReturn(run func(context.Context, dto.InsertDTO) (int64, error)) *MockAudit_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAudit creates a new instance of MockAudit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAudit(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAudit {
	mock := &MockAudit{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
